---
import { isExperience } from "@/types/resume";
import type { Experience, Education } from "@/types/resume";

interface Props {
  elements: (Experience | Education)[];
  colored: boolean;
}

const { elements, colored } = Astro.props;
---

<ul
  class="timeline timeline-snap-icon max-md:timeline-compact timeline-vertical"
>
  {
    elements.map((element, index) => {
      const isLeft = index % 2 === 0;
      return (
        <li class="group transition-transform duration-200 cursor-pointer">
          <div class="timeline-middle group-hover:bg-accent transition-colors duration-200 rounded-full">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              class:list={[
                { "text-secondary": colored },
                "h-5 w-5",
                "group-hover:text-white transition-colors duration-200",
              ]}
            >
              <path
                fill-rule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
                clip-rule="evenodd"
              />
            </svg>
          </div>
          <div
            class={`
						${isLeft ? "timeline-start" : "timeline-end"} mb-8
						${isLeft ? "text-right md:text-right" : "text-left md:text-left"}
						group-hover:scale-105 transition-transform duration-200
						${isLeft ? "pr-2 md:pr-4" : "pl-2 md:pl-4"}
					`}
          >
            <time class="font-mono italic">{element.time}</time>
            {element.link ? (
              <a
                href={element.link}
                target="_blank"
                rel="noopener noreferrer"
                class="block hover:underline focus:underline"
              >
                <div class="text-lg font-black">
                  {isExperience(element) ? element.title : element.degree}
                </div>
              </a>
            ) : (
              <div class="text-lg font-black">
                {isExperience(element) ? element.title : element.degree}
              </div>
            )}
            <div>
              {isExperience(element) ? element.company : element.school} Â·{" "}
              {element.location}
            </div>
            {"description" in element && element.description && (
              <div class="text-gray-600">{element.description}</div>
            )}
          </div>
          <hr
            class:list={[
              { "bg-secondary": colored },
              "transition-colors duration-200",
              "group-hover:bg-accent",
            ]}
          />
        </li>
      );
    })
  }
</ul>
