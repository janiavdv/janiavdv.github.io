---
import DarkLightController from "./DarkLightController.astro";
import SocialIcons from "./SocialIcons.astro";
import { template } from "@/settings";
---

<nav
  class="w-full mx-auto px-5 max-w-screen-lg flex items-center justify-between py-4 bg-base-100 sticky top-0 z-50"
>
  <div class="flex w-full items-center justify-between gap-8">
    <!-- Mobile Hamburger -->
    <button
      id="menu-toggle"
      type="button"
      class="md:hidden flex items-center px-2 py-1 rounded transition-colors hover:bg-secondary/20"
      aria-label="Toggle menu"
      aria-expanded="false"
      aria-controls="mobile-menu"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>

    <!-- Desktop Menu -->
    <ul class="hidden md:flex space-x-8 items-center">
      <li>
        <a
          href={`${template.base}/`}
          class="text-lg px-3 py-1 rounded-full transition-colors hover:bg-secondary/20"
          >Home</a
        >
      </li>
      <li>
        <a
          href={`${template.base}/projects`}
          class="text-lg px-3 py-1 rounded-full transition-colors hover:bg-secondary/20"
          >Projects</a
        >
      </li>
      <li>
        <a
          href={`${template.base}/resume`}
          class="text-lg px-3 py-1 rounded-full transition-colors hover:bg-secondary/20"
          >Resume</a
        >
      </li>
    </ul>

    <div class="flex items-center gap-6">
      <SocialIcons />
      <DarkLightController />
    </div>
  </div>

  <!-- Mobile Menu -->
  <ul
    id="mobile-menu"
    class="hidden md:hidden flex-col space-y-2 mt-2 bg-base-100 rounded shadow-lg absolute left-0 right-0 top-full px-5 py-4 z-40
           opacity-0 scale-y-95 transform origin-top transition-all duration-200 ease-out"
  >
    <li>
      <a
        href={`${template.base}/`}
        class="text-lg px-3 py-1 rounded-full transition-colors hover:bg-secondary/20 block"
        >Home</a
      >
    </li>
    <li>
      <a
        href={`${template.base}/projects`}
        class="text-lg px-3 py-1 rounded-full transition-colors hover:bg-secondary/20 block"
        >Projects</a
      >
    </li>
    <li>
      <a
        href={`${template.base}/resume`}
        class="text-lg px-3 py-1 rounded-full transition-colors hover:bg-secondary/20 block"
        >Resume</a
      >
    </li>
  </ul>
</nav>

<script is:global>
  // Abort previous listeners if this script is injected multiple times
  window.__navAbort?.abort();
  const controller = new AbortController();
  window.__navAbort = controller;

  const DURATION = 200; // must match duration-200

  function getEls() {
    return {
      btn: document.getElementById("menu-toggle"),
      menu: document.getElementById("mobile-menu"),
    };
  }

  function openMenu(menu, btn) {
    if (!menu) return;
    menu.classList.remove("hidden");
    requestAnimationFrame(() => {
      menu.classList.add("flex");
      menu.classList.remove("opacity-0", "scale-y-95");
      menu.classList.add("opacity-100", "scale-y-100");
    });
    if (btn) btn.setAttribute("aria-expanded", "true");
  }

  function closeMenu(menu, btn) {
    if (!menu) return;
    menu.classList.remove("opacity-100", "scale-y-100");
    menu.classList.add("opacity-0", "scale-y-95");
    setTimeout(() => {
      menu.classList.remove("flex");
      menu.classList.add("hidden");
    }, DURATION);
    if (btn) btn.setAttribute("aria-expanded", "false");
  }

  function isMenuOpen(menu) {
    return menu?.classList.contains("flex") && menu?.classList.contains("opacity-100");
  }

  // Toggle via event delegation (survives DOM swaps)
  document.addEventListener("click", (e) => {
    const toggle = e.target.closest("#menu-toggle");
    if (!toggle) return;

    const { menu } = getEls();
    if (!menu) return;

    if (isMenuOpen(menu)) {
      closeMenu(menu, toggle);
    } else {
      openMenu(menu, toggle);
    }
  }, { signal: controller.signal });

  // Close when clicking outside
  document.addEventListener("click", (e) => {
    const { btn, menu } = getEls();
    if (!btn || !menu) return;

    if (isMenuOpen(menu) && !menu.contains(e.target) && !btn.contains(e.target)) {
      closeMenu(menu, btn);
    }
  }, { signal: controller.signal });

  // Close when clicking a link inside the menu
  document.addEventListener("click", (e) => {
    const link = e.target.closest("#mobile-menu a");
    if (!link) return;
    const { btn, menu } = getEls();
    closeMenu(menu, btn);
  }, { signal: controller.signal });

  // Close on Escape
  document.addEventListener("keydown", (e) => {
    if (e.key !== "Escape") return;
    const { btn, menu } = getEls();
    if (isMenuOpen(menu)) closeMenu(menu, btn);
  }, { signal: controller.signal });

  // If using Astro View Transitions, reset menu around swaps
  document.addEventListener("astro:before-swap", () => {
    const { btn, menu } = getEls();
    if (!menu) return;
    menu.classList.remove("flex", "opacity-100", "scale-y-100");
    menu.classList.add("hidden", "opacity-0", "scale-y-95");
    if (btn) btn.setAttribute("aria-expanded", "false");
  }, { signal: controller.signal });
</script>